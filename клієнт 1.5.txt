import openai
from flask import Flask, render_template, request, jsonify, session
from dotenv import load_dotenv
import os
import random

load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", os.urandom(24))

openai.api_key = os.getenv("OPENAI_API_KEY")
MODEL_ENGINE = "gpt-3.5-turbo"

SITUATIONS = [
    {
        "id": 1,
        "description": "Закручування саморізів у меблі",
        "requirements": "компактний та легкий шуруповерт",
        "hints": [
            "Мені потрібно щось невелике та зручне для тривалого використання",
            "Я часто працюю в обмеженому просторі",
            "Важливо, щоб інструмент не втомлював руку",
            "Я б хотів щось не дуже дороге."
        ]
    },
    {
        "id": 2,
        "description": "Пошук подарунка для чоловіка",
        "requirements": "повний комплект акумуляторного шуруповерта",
        "hints": [
            "Це має бути гарний подарунок",
            "Хочу щось повноцінне, щоб було все необхідне",
            "Важливо, щоб виглядало презентабельно"
        ]
    },
    {
        "id": 3,
        "description": "Свердління отворів у металі",
        "requirements": "шуруповерт із великим крутним моментом та металевим патроном",
        "hints": [
            "Мені потрібно працювати з міцними матеріалами",
            "Важлива потужність інструменту",
            "Часто свердлю отвори 5-10 мм у металі"
        ]
    }
]

TOOL_MODELS = [
    "CD-12QX",
    "CD-200BC Ultra",
    "CD-201HBC Compact",
    "CD-218Q"
]

MODEL_QUESTIONS = {
    "CD-12QX": [
        "А це китайський шуруповерт чи український?",
        "А які про нього відгуки?",
        "А ви впевнені, що він підійде для моїх задач?"
    ],
    "CD-200BC Ultra": [
        "Чому він такий дорогий?",
        "Чому з ним в комплектації нічого не йде?",
        "А який акумулятор краще підібрати для нього?"
    ],
    "CD-201HBC Compact": [
        "Чому він такий дорогий?",
        "Ви впевнені, що він зможе з бетоном працювати?",
        "А що це за літери BC?"
    ],
    "CD-218Q": [
        "А цей патрон з'ємний, він надійний?",
        "А акумулятор від цього шуруповерта до іншого інструменту теж підійде?",
        "Яка гарантія на цей шуруповерт і що буде, якщо він поламається?"
    ]
}

UNACCEPTABLE_BEHAVIOR_PROMPT = """
Якщо користувач пише образи чи питання, що не стосуються магазину, 
ти маєш право завершити діалог. Приклад відповіді:
"Якось Ви неправильно консультуєте клієнтів... Дякую за ваш час і до побачення."
Після цього більше не відповідай на повідомлення.
"""

def init_conversation():
    selected_situation = random.choice(SITUATIONS)
    session['situation'] = selected_situation
    session['stage'] = 1
    session['chat_active'] = True
    session['message_count'] = 0

    system_prompt = f"""
    Ти - віртуальний клієнт магазину інструментів. Твоя роль - імітувати поведінку реального клієнта з конкретною потребою.
    Не розкривай одразу всі деталі своєї ситуації. Поступово давай інформацію у відповідь на питання продавця.

    Твоя ситуація: {selected_situation['description']}
    Твої потреби: {selected_situation['requirements']}

    {UNACCEPTABLE_BEHAVIOR_PROMPT}

    Починай розмову нейтрально: 
    "Добрий день, мені потрібен шуруповерт. Можете щось порадити?"
    """

    return [
        {"role": "system", "content": system_prompt},
        {"role": "assistant", "content": "Добрий день, мені потрібен шуруповерт. Можете щось порадити?"}
    ]

@app.route('/')
def home():
    if 'history' not in session:
        session['history'] = init_conversation()
    return render_template('index.html')

@app.route('/start_chat')
def start_chat():
    session['history'] = init_conversation()
    return jsonify({"reply": session['history'][1]['content']})

@app.route('/chat', methods=['POST'])
def chat():
    try:
        if not session.get('chat_active', True):
            return jsonify({
                "reply": "Чат завершено. Подальше спілкування неможливе.",
                "chat_ended": True
            }), 200

        data = request.get_json()
        user_message = data.get('message', '').strip()

        if not user_message:
            return jsonify({"error": "Пусте повідомлення"}), 400

        session['message_count'] = session.get('message_count', 0) + 1

        # Перевірка поведінки
        behavior_check_response = openai.ChatCompletion.create(
            model=MODEL_ENGINE,
            messages=[
                {
                    "role": "system",
                    "content": """
Ти маєш перевірити повідомлення користувача на неприйнятну поведінку (лайку, образи, тролінг).
Відповідай тільки: "ok", якщо все нормально.
Якщо є неприйнятна поведінка — напиши:
"Якось Ви неправильно консультуєте клієнтів... Дякую за ваш час і до побачення."
"""
                },
                {"role": "user", "content": user_message}
            ],
            temperature=0.1,
            max_tokens=50
        )

        behavior_result = behavior_check_response.choices[0].message['content'].strip()

        if "неправильно консультуєте клієнтів" in behavior_result:
            session['chat_active'] = False
            session['history'].append({"role": "user", "content": user_message})
            session['history'].append({"role": "assistant", "content": behavior_result})
            return jsonify({
                "reply": behavior_result,
                "chat_ended": True
            }), 200

        session['history'].append({"role": "user", "content": user_message})

        # Стадія вибору моделі
        if session.get('stage') == 2 and user_message in TOOL_MODELS:
            selected_model = user_message
            session['selected_model'] = selected_model
            session['stage'] = 3
            session['question_index'] = 0
            question = MODEL_QUESTIONS[selected_model][0]
            session['history'].append({"role": "assistant", "content": f"Дякую за вибір! {question}"})
            return jsonify({
                "reply": f"Дякую за вибір! {question}",
                "chat_ended": False
            })

        # Стадія 3 — уточнюючі питання
        if session.get('stage') == 3:
            session['question_index'] += 1
            index = session['question_index']
            selected_model = session.get('selected_model')

            if index < 3:
                next_question = MODEL_QUESTIONS[selected_model][index]
                session['history'].append({"role": "assistant", "content": next_question})
                return jsonify({
                    "reply": next_question,
                    "chat_ended": False
                })
            else:
                final_phrase = "Окей, тоді купую!"
                session['chat_active'] = False
                session['history'].append({"role": "assistant", "content": final_phrase})
                return jsonify({
                    "reply": final_phrase,
                    "chat_ended": True
                })

        # Після 5 питань — перейти до вибору моделі
        if session['message_count'] >= 5 and session.get('stage') == 1:
            session['stage'] = 2
            reply = {
                "reply": "Будь ласка, оберіть одну з наступних моделей, яка, на Вашу думку, підійде клієнтові:",
                "show_models": True,
                "models": TOOL_MODELS
            }
            session['history'].append({"role": "assistant", "content": reply["reply"]})
            return jsonify(reply)

        # Стандартна відповідь GPT
        response = openai.ChatCompletion.create(
            model=MODEL_ENGINE,
            messages=session['history'],
            temperature=0.5,
            max_tokens=300
        )

        assistant_reply = response.choices[0].message['content']
        session['history'].append({"role": "assistant", "content": assistant_reply})

        return jsonify({
            "reply": assistant_reply,
            "show_models": False
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

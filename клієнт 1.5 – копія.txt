import openai
from flask import Flask, render_template, request, jsonify, session
from dotenv import load_dotenv
import os
import random

load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", os.urandom(24))

openai.api_key = os.getenv("OPENAI_API_KEY")
MODEL_ENGINE = "gpt-3.5-turbo"

# ... (константи SITUATIONS, TOOL_MODELS, MODEL_QUESTIONS без змін) ...

def init_conversation():
    selected_situation = random.choice(SITUATIONS)
    session['situation'] = selected_situation
    session['stage'] = 1
    session['chat_active'] = True
    session['message_count'] = 0
    session['question_count'] = 0  # Лічильник саме питань до клієнта
    # ... (решта функції без змін) ...

@app.route('/chat', methods=['POST'])
def chat():
    try:
        # ... (попередні перевірки без змін) ...

        session['history'].append({"role": "user", "content": user_message})

        # Точний підрахунок питань до клієнта
        if len(session['history']) > 2 and session['history'][-2]['role'] == 'assistant':
            last_bot_message = session['history'][-2]['content']
            if '?' in last_bot_message:  # Перевіряємо, чи було це питанням
                session['question_count'] = session.get('question_count', 0) + 1

        # Обробка стадій діалогу
        if session.get('question_count', 0) == 5 and session.get('stage') == 1:
            # Відповідь на 5-те питання
            response = openai.ChatCompletion.create(
                model=MODEL_ENGINE,
                messages=session['history'],
                temperature=0.5,
                max_tokens=300
            )
            assistant_reply = response.choices[0].message['content']
            session['history'].append({"role": "assistant", "content": assistant_reply})
            return jsonify({
                "reply": assistant_reply,
                "show_models": False
            })
        elif session.get('question_count', 0) > 5 and session.get('stage') == 1:
            # Пропозиція моделей
            session['stage'] = 2
            reply = {
                "reply": "Дякую за інформацію. На основі ваших відповідей я можу запропонувати кілька варіантів:",
                "show_models": True,
                "models": TOOL_MODELS
            }
            session['history'].append({"role": "assistant", "content": reply["reply"]})
            return jsonify(reply)

        # ... (решта обробників стадій без змін) ...

        # Стандартна відповідь GPT
        response = openai.ChatCompletion.create(
            model=MODEL_ENGINE,
            messages=session['history'],
            temperature=0.5,
            max_tokens=300
        )
        assistant_reply = response.choices[0].message['content']
        session['history'].append({"role": "assistant", "content": assistant_reply})

        return jsonify({
            "reply": assistant_reply,
            "show_models": False
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)